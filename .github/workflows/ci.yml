name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, 386, arm64, arm]
        exclude:
          - goos: darwin
            goarch: 386
          - goos: darwin
            goarch: arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.6

      - name: Build binary
        run: |
          mkdir -p dist
          binary_name="mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ ${{ matrix.goos }} == "windows" ]; then
            binary_name="$binary_name.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/$binary_name .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_name: mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream
