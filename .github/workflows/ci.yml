name: Release

on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, 386, arm64, arm]
        exclude:
          - goos: darwin
            goarch: 386
          - goos: darwin
            goarch: arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.6

    - name: Build binary
      run: |
        mkdir -p dist
        binary_name="mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ ${{ matrix.goos }} == "windows" ]; then
          binary_name="$binary_name.exe"
        fi
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/$binary_name .

    - name: Check if Release Exists
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', ''),
          }).catch(err => {
            if (err.status === 404) {
              return null;
            } else {
              throw err;
            }
          });

          return release ? 'true' : 'false';
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

    - name: Create or Get Release
      id: create_release
      if: steps.check_release.outputs.result == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          const tag_name = context.ref.replace('refs/tags/', '');
          let release;

          if (github.rest.repos.getReleaseByTag) {
            release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag_name
            });
          } else {
            release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag_name,
              name: `Release ${tag_name}`,
              draft: false,
              prerelease: false,
            });
          }

          core.setOutput('upload_url', release.data.upload_url);

    - name: Upload Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_name: mail_checker-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        asset_content_type: application/octet-stream


